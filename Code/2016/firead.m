%%Written by Michael Wright and Christopher Duffy

%%The following function takes in the two fits files generated by
%%astrometry.net that give the RA-Dec locations of the stars and the pixel
%%locations of the stars. It then extracts these positions into individual
%%variables, sorts the stars by right ascension and sorts the other data
%%columns to match. It repeats this process for a second image and then
%%finds the difference in pixel co-ordinates for objects with the same
%%RA-Dec before converting this to a difference in arc-seconds

function [ Distance ] = firead(Raw, Final)

%%make the correct strings for the astrometry file names

raw1 = strcat(Raw,'.rdls');
raw2 = strcat(Raw,'-indx.xyls');
final1 = strcat(Final,'.rdls');
final2 = strcat(Final,'-indx.xyls');

cd('/Users/chrisduffy/Documents/MATLAB/Solar Eclplise/Astrometry/Feb 24th Solved')
%%File read in
a = fitsread(raw1, 'binarytable');
b = fitsread(raw2, 'binarytable');

%%Split the cells, to give the individual quantities their own variable
right_ascension_cell = a(1,1);
declination_cell = a(1,2);
pixel_x_cell = b(1,1);
pixel_y_cell = b(1,2);

%%Move this from a cell to a double, so the information is directly
%%accessible. 
right_ascension = right_ascension_cell{1,1};
declination = declination_cell{1,1};
pixel_x = pixel_x_cell{1,1};
pixel_y = pixel_y_cell{1,1};

%%Sort the right ascension and create the blank variables for the other
%%quantities. 
sorted_right_ascension = sort(right_ascension);
sorted_declination = zeros(length(right_ascension),1);
sorted_pixel_x = zeros(length(right_ascension),1);
sorted_pixel_y = zeros(length(right_ascension),1);

%%Sort the other quantities
for i = 1:length(sorted_right_ascension)
    for j = 1:length(right_ascension)
        if right_ascension(j) == sorted_right_ascension(i)
            sorted_declination(i) = declination(j);
            sorted_pixel_x(i) = pixel_x(j);
            sorted_pixel_y(i) = pixel_y(j);
        end
    end
end

%%repeat process for the final image

clear('i', 'j')
cd('/Users/chrisduffy/Documents/MATLAB/Solar Eclplise/Astrometry')
%%File read in
c = fitsread(final1', 'binarytable');
d = fitsread(final2, 'binarytable');

%%Split the cells, to give the individual quantities their own variable
right_ascension_cell1 = c(1,1);
declination_cell1 = c(1,2);
pixel_x_cell1 = d(1,1);
pixel_y_cell1 = d(1,2);

%%Move this from a cell to a double, so the information is directly
%%accessible. 
right_ascension1 = right_ascension_cell1{1,1};
declination1 = declination_cell1{1,1};
pixel_x1 = pixel_x_cell1{1,1};
pixel_y1 = pixel_y_cell1{1,1};

%%Sort the right ascension and create the blank variables for the other
%%quantities. 
sorted_right_ascension1 = sort(right_ascension1);
sorted_declination1 = zeros(length(right_ascension1),1);
sorted_pixel_x1 = zeros(length(right_ascension1),1);
sorted_pixel_y1 = zeros(length(right_ascension1),1);

%%Sort the other quantities
for i = 1:length(sorted_right_ascension1)
    for j = 1:length(right_ascension1)
        if right_ascension1(j) == sorted_right_ascension1(i)
            sorted_declination1(i) = declination1(j);
            sorted_pixel_x1(i) = pixel_x1(j);
            sorted_pixel_y1(i) = pixel_y1(j);
        end
    end
end

clear('i', 'j')

%%find the change in pixel pixel locations for objects of the same RA-DEC

for i = 1:length(sorted_right_ascension)
    for j = 1:length(sorted_right_ascension1)
        if sorted_right_ascension(i) == sorted_right_ascension1(j)
distance_pixels(i,1) = sqrt((sorted_pixel_x(i)-sorted_pixel_x1(j))^2+(sorted_pixel_y(i)-sorted_pixel_y1(j))^2);
        end
    end
end

%%Convert from pixels to arcseconds
Distance = distance_pixels.*1.77;
end